# Criando um banco de dados

import sqlite3
conn = sqlite3.connect('clientes.db')
conn.close()

_________________________________________

# Criando uma tabela no banco de dados

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE Clientes (
	id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	nome TEXT NOT NULL,
	cpf VARCHAR (11) NOT NULL,
	email TEXT NOT NULL,
	fone TEXT,
	cidade TEXT,
	uf VARCHAR(2) NOT NULL,
	criado_em DATE NOT NULL
);
""")

print("Tabela criada com sucesso.")

conn.close()

_____________________________________________________________

# Criando dados SQL

import sqlite3

conn = sqlite3.connect ('clientes.db')
cursor = conn.cursor()

cursor.execute("""
INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES ('Regis', 35, '00000000000', 'regis@email.com' '11-98765-4321', 'São Paulo', 'SP', '2014-06-08')
""")

cursor.execute("""
INSERT INTO clientes(nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES ('Aloisio', 87,'11111111111', 'aloisio@email.com', '98765-4322', 'Porto Alegre', 'RS', '2014-06-09')
""")

cursor.execute("""
INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES ('Bruna', 21, '22222222222', 'bruna@email.com', '21-98765-4323', 'Rio de Janeiro', 'RJ', '2014-06-09')
""")

cursor.execute("""
INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES ('Matheus', 19, '33333333333', 'matheus@email.com', '11-98765-4324', 'Campinas', 'SP', '2014-06-08')
""")

conn.commit()

print ('Dados inseridos com sucesso.')

conn.close()

________________________________________________________________________________________________________

# Inserindo "n" registros com uma tupla de dados

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

lista = [(
'Fabio', 23, '44444444444', 'fabio@email.com', '1234-5678', 'Belo Horizonte', 'MG', '2014-06-09'),
('Joao', 21, '55555555555', 'joao@email.com',
'11-1234-5600', 'Sao Paulo', 'SP', '2014-06-09'),
('Xavier', 24, '66666666666', 'xavier@email.com', '12-1234-5601', 'Campinas', 'SP', '2014-06-10')]

cursor.executemany("""
INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES (?,?,?,?,?,?,?,?)
""", lista)
conn.commit()
print('Dados inseridos com sucesso.')
conn.close()

__________________________________________________________________________________

# Inserindo um registro com parametros de entrada definido pelo usuario

import sqlite3

conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

p_nome = input('Nome: ')
p_idade = input('Idade: ')
p_cpf = input('CPF: ')
p_email = input('Email: ')
p_fone = input('Fone: ')
p_cidade = input('Cidade: ')
p_uf = input('UF: ')
p_criado_em = input('Criado em (yyyy-mm-dd): ')

cursor.excute("""
INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
VALUES(?,?,?,?,?,?,?,?)
""", (p_nome, p_idade, p_cpf, p_email, p_fone, p_cidade, p_uf, p_criado_em))

conn.commit()

print('Dados inseridos com sucesso.')

conn.close()

___________________________________________________________________

# Lendo os dados 

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()


cursor.execute("""
SELECT * FROM clientes;
""")
for linha in cursor.fetchall():
	print(linha)

conn.close()

___________________________________________

# Alterando os dados

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

id_cliente = 1 
novo_fone = '11-1000-2014'
novo_criado_em = '2014-06-11'

cursor.execute("""
UPDATE clientes
SET fone = ?, criado_em = ?
WHERE id = ?
""", (novo_fone, novo_criado_em, id_cliente))

conn.commit()

print('Dados atualizados com sucesso.')

conn.close()

________________________________________________________

# Deletando os dados

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

id_cliente = 8

cursor.execute("""
DELETE FROM clientes
WHERE id = ?
""", (id_clientes,))

conn.conmit()

print ('Registro excluido com sucesso.')

conn.close()

___________________________________________________

# Adicionando uma nova coluna

import sqlite3
conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()

cursor.execute("""
ALTER TABLE clientes
ADD COLUMN bloqueado BOOLEAN;
""")

conn.commit()

print('Novo campo adicionado com sucesso.')
conn.close()

_________________________________________________________

# Lendo as informações 

import sqlite3

conn = sqlite3.connect('clientes.db')
cursor = conn.cursor()
nome_tabela = 'clientes'

cursor.execute('PRAGMA table_info({})'.format(nome_tabela))

for coluna in colunas:
	print (coluna)

cursor.execute("""
SELECT name FROM sqlite_master WHERE type = 'table' ORDER BY name
""")

print ('Tabelas:')
for tabela in cursor.fetchall():
	print ("%s" % (tabela))

cursor.execute("""
SELECT sql FROM sqlite_master WHERE type = 'table' AND name = ?
""", (nome_tabela,))

print ('Schema:')
for schema in cursor.fetchall():
	print ("%s" % (schema))

conn.close()

______________________________________________________________

# Fazendo backup

import sqlite3
import io

conn = sqlite3.connect('clientes.db')

with io.open('clientes_dump.sql', 'w') as f:
	for linha in conn.iterdump():
		f.write('%s\n' % linha)

print('Backup realizado com sucesso.')
print('Salvo como clientes_dump.sql')
conn.close()

________________________________________________________

# Recuperando o banco de dados

import sqlite3
import io

conn = sqlite3.connect('clientes_recuperado.db')

cursor = conn.cursor()

f = io.open('clientes_dump.sql', 'r')
sql = f.read()
cursor.executescript(sql)

print ('Banco de dados recuperado com sucesso.')
print ('Salvo como clientes_recuperado.db')

conn.close()


_____________________________________________________

# Criando valores randômicos

import random
import rstr
import datetime

def gen_age() :
	return random.randint(15, 99)

def gen_cpf():
	return rstr.rstr('1234567890',11)

def gen_phone():
	return '({0} {1}-{2}'.format(
		rstr.rstr('1234567890', 2),
		rstr.rstr('1234567890', 4),
		rstr.rstr('1234567890', 4))

def gen_timestamp():
	year = random.randint(1980, 2015)
	month = random.randint(1, 12)
	day = random.randint(1, 28)
	hour = random.randint(1, 23)
	minute = random.randint(1, 59)
	second = random.randint(1, 59)
	microsecond = random.randint(1, 999999)
	date = datetime.datetime(year, month, day, hour,minute, second,microsecond).isoformat(" ")

	return date

def gen_city():
	list_city = [
		[u'São Paulo', 'SP'],
		[u'Rio de Janeiro', 'RJ'],
		[u'Porto Alegre', 'RS'],
		[u'Campo Grande', 'MS']]
	return random.choice(list_city)

_________________________________________________________________________________________________________

# Conectando e desconectando do banco de dados

import sqlite3
class Connect(object):

	def __init__(self, db_name):
		try:

			self.conn = sqlite3.connect(db_name)
			self.cursor = self.conn.cursor()

			print("Banco:", db_name)

			self.cursor.execute('SELECT SQLITE_VERSION()')
			self.data = self.cursor.fetchone()

			print("SQLite version: %s" % self.data)

		except sqlite3.Error:
			print("Erro ao abrir banco.")
			return False

	def close_db(self):
		if self.conn:
			self.conn.close()
			print ("Conexão fechada.")

class ClientesDb(object):

	def __init__(self):
		self.db = Connect('clientes.db')

	def close_connection(self):
		self.db.close_db()

if __name__ == ' __main__':
	cliente = clientesDb()
	cliente.close_connection()

# 14 - Modo interativo 

# Criando banco de dados

import os
import sqlite3
import io
import datetime
import names
import csv
from gen_random_values import *

class Connect(object):

	def __init__(self, db_name):
		try:

			self.conn = sqlite3.connect(db_name)
			self.cursor = self.conn.cursor()
			print("Banco:", db_name)
			self.cursor.execute('SELECT SQLITE_VERSION()')
			self.data = self.cursor.fetchone()
			print("SQLite version: %s" % self.data)
			except sqlite3.Error:
			print("Erro ao abrir banco.")
			return False

	def commit_db(self):
		if self.conn:
			self.conn.commit()

	def close_db(self):
		if self.conn:
			self.conn.close()
			print("Conexão fechada.")


class clientesDb(object):

	tb_name = "clientes"

	def __init__(self):
		self.db = Connect('clientes.db')
		self.tb_name 

	def fechar_conexao(self):
		self.db.close_db()

if __name__ == '__main__':
	c=ClientesDb()

# Criando uma tabela 

def criar_schema(self, schema_name='sql/clientes_schema.sql'):
	print("Criando tabelas %s ..." % self.tb_name)

	try:
		with open(schema_name, 'rt') as f:
			schema = f.read()
			self.db.cursor.executescript(schema)
	except sqlite3.Error:
		print("Aviso: A tabela %s já existe." % self.tb_name)
		return False

	print("Tabela %s criada com sucesso." % self.tb_name)

if __name__ == '__main__':
	c = ClientesDb()
	c.criar_schema()



# Inserindo um registro com comando SQL

def inserir_um_registro(self):
	try:
		self.db.cursor.execute("""
		INSERT INTO clientes (nome, idade, cpf, email, 
		VALUES ('Regis da Silva', 35, '12345678901', 'regis@email.com', '(11) 9876-5342',
		'São Paulo', 'SP', '2014-07-30 11:23:00.199000')
		""")

		self.db.commit_db()
		print("Um registro inserido com sucesso.")
	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser unico.")
		return False

if __name__ == '__main__': 
	c = ClientesDb()
	c.criar_schema()
	c.inserir_um_registro()
	

#Inserindo n registros com uma lista de dados

self.db.cursor.executemany("""INSERT INTO tabela (campos) VALUES (?)""", lista)

def inserir_com_lista(self):

	lista = [('Agenor de Sousa', 23, '12345678901', 'agenor@email.com','(10) 8300-0000', 'Salvador', 'BA', '2014-07-29 11:23:01.199001'),
		('Bianca Antunes', 21, '12345678902', 'bianca@email.com','(10) 8350-0001', 'Fortaleza', 'CE', '2014-07-28 11:23:02.199002'),
		('Carla Ribeiro', 30, '12345678903', 'carla@email.com','(10) 8377-0002', 'Campinas', 'SP', '2014-07-28 11:23:03.199003'),
		('Fabiana de Almeida', 25, '12345678904', 'fabiana@email.com','(10) 8388-0003', 'São Paulo', 'SP', '2014-07-29 11:23:04.199004'),
		]

	try: 

		self.db.cursor.executemany("""
		INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
		VALUES (?,?,?,?,?,?,?,?)
		""", lista)

		self.db.commit_db()
		print("Dados inseridos da lista com sucesso: %s registros." %
			len(lista))

	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False


# Inserindo Registros de um arquivo externo

def inserir_de_arquivo(self):
	try:
		with open('sql/clientes_dados.sql', 'rt') as f:
			dados = f.read()
			self.db.cursor.executescript(dados)

			self.db.commit_db()
			print("Dados inseridos do arquivo com sucesso.")

	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False

# importando dados de um arquivo csv

def inserir_de_csv(self, file_name='csv/clientes.csv'):
	try:
		reader = csv.reader(
			open(file_name, 'rt'), delimiter=',')
		linha = (reader,)
		for linha in reader:
			self.db.cursor.execute("""
			INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
			VALUES (?,?,?,?,?,?,?,?)
			""", linha)

		self.db.commit_db()
		print("Dados importados do csv com sucesso.")
	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False


#Inserindo um registro com parametros de entrada definido pelo usuario 

def inserir_com_parametros(self):

	self.nome = input('Nome: ')
	self.idade = input('Idade: ')
	self.cpf = input('CPF: ')
	self.email = input('Email: ')
	self.fone = input('Fone: ')
	self.cidade = input('Cidade: ')
	self.uf = input('UF: ') or 'SP'
	date = datetime.datetime.now().isoformat(" ")
	self.criado_em = input('Criado em (%s): ' % date) or date

	try:

		self.db.cursor.execute("""
		INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
		VALUES (?,?,?,?,?,?,?,?)
		""", (self.nome, self.idade, self.cpf, self.email, self.fone, self.cidade, self.uf, self.criado_em))
		
		self.db.commit_db()
		print("Dados inseridos com sucesso.")

	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False


# Inserindo valores randomicos

def inserir_randomico(self, repeat=10):

	lista = []
	for _ in range(repeat):
		date = datetime.datetime.now().isoformat(" ")
		fname = names.get_first_name()
		lname = names.get_last_name()
		name = fname + ' ' + lname
		email = fname[0].lower() + '.' + lname.lower() + '@email.com'
		c = gen_city()
		city = c[0]
		uf = c[1]
		lista.append((name, gen_age(), gen_cpf(),
			      email, gen_phone(),
			      city, uf, date))

	try:
		self.db.cursor.executemany("""
		INSERT INTO clientes (nome, idade, cpf, email, fone, cidade, uf, criado_em)
		VALUES (?,?,?,?,?,?,?,?)
		""", lista)
		self.db.commit_db()
		print("Inserindo %s registros na tabela..." % repeat)
		print("Registros criados com sucesso.")	

	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False	
		

# Lendo os dados

def ler_todos_clientes(self):
	sql = 'SELECT * FROM clientes ORDER BY nome'
	r = self.db.cursor.execute(sql)
	return r.fetchall()

def imprimir_todos_clientes(self):
	lista = self.ler_todos_clientes()
	print('{:>3s} {:20s} {:<5s} {:15s} {:21s} {:14s} {:15s} {:s} {:s}'.format(
		'id', 'nome', 'idade', 'cpf', 'email', 'fone', 'cidade', 'uf', 'criado_em'))

	for c in lista:
		print('{:3d} {:23s} {:2d} {:s} {:>25s} {:s} {:15s} {:s} {:s}'.format(
			c[0], c[1], c[2],
			c[3], c[4], c[5],
			c[6], c[7], c[8]))


# Mais SELECT

def localizar_cliente(self, id):
	r = self.db.cursor.execute(
		'SELECT * FROM clientes WHERE id = ?', (id,))
	return r.fetchone()

def imprimir_cliente(self, id):
	if self.localizar_cliente(id) == None:
		print('Não existe cliente com o id informado.')
	else:
		print(self.localizar_cliente(id))


# SELECT personalizado

def meu_select(self, sql="SELECT * FROM clientes WHERE uf='RJ';"):
	r = self.db.cursor.execute(sql)

	self.db.commit_db()
	for cliente in r.fetchall():
		print(cliente)

def ler_arquivo(self, file_name='sql/clientes_sp.sql'):
	with open(file_name, 'rt') as f:
		dados = f.read()
		sqlcomandos = dados.split(';')
		print("Consulta feita a partir de arquivo externo.")
		for comando in sqlcomandos:
			r = self.db.cursor.execute(comando)
			for c in r.fetchall():
				print(c)

	self.db.commit_db()


# Update - Alternado os dados

def atualizar(self, id):
	try:
		c = self.localizar_cliente(id)
		if c:

			self.novo_fone = input('Fone: ')
			self.db.cursor.execute("""
			UPDATE clientes
			SET fone = ?
			WHERE id = ?
			""", (self.novo_fone, id,))

			self.db.commit_db()
			print("Dados atualizados com sucesso.")
		else:
			print('Não existe cliente com o id informado.')
	except e:
		raise e


# Deletando os dados

def deletar(self, id):
	try:
		c = self.localizar_cliente(id)

		if c:
			self.db.cursor.execute("""
			DELETE FROM clientes WHERE id = ?
			""", (id,))

			self.db.commit_db()
			print("Registro %d excluído com sucesso." % id)
		else:
			print('Não existe cliente com o código informado.')

	except e:
		raise e


# Adicionando uma nova coluna

def alterar_tabela(self):
	try:
		self.db.cursor.execute("""
		ALTER TABLE clientes
		ADD COLUMN bloqueado BOOLEAN;
		""")

		self.db.commit_db()
		print("Novo campo adicionado com sucesso.")

	except sqlite3.OperationalError:
		print("Aviso: O campo 'bloqueado' já existe.")
		return False


# Lendo as informaçoes no BD

def table_info(self):
	t = self.db.cursor.execute(
		'PRAGMA table_info({})'.format(self.tb_name))
	colunas = [tupla[1] for tupla in t.fetchall()]
	print('Colunas:', colunas)



def table_list(self):
	l = self.db.cursor.execute("""
	SELECT name FROM sqlite_master WHERE type='table' ORDER BY name
	""")
	print('Tabelas:')

	for tabela in l.fetchall():
		print("%s" % (tabela))


def table_schema(self):
	s = self.db.cursor.execute("""
	SELECT sql FROM sqlite_master WHERE type='table' AND name=?
	""", (self.tb_name,))
	
	print('Schema:')
	
	for schema in s.fetchall():
		print("%s" % (schema))


# Fazendo Backup do BD

def backup(self, file_name='sql/clientes_bkp.sql'):
	with io.open(file_name, 'w') as f:
		for linha in self.db.conn.iterdump():
			f.write('%s\n' % linha)

	print('Backup realizado com sucesso.')
	print('Salvo como %s' % file_name)

# Recuperando o BD

def importar_dados(self, db_name='clientes_recovery.db', file_name='sql/clientes_bkp.sql'):
	try:
		self.db = Connect(db_name)
		f = io.open(file_name, 'r')
		sql = f.read()
		self.db.cursor.executescript(sql)
		print('Banco de dados recuperado com sucesso.')
		print('Salvo como %s' % db_name)

	except sqlite3.OperationalError:
		print("Aviso: O banco de dados %s já existe. Exclua-o e faça novamente." % 
			db_name)

		return False


def fechar_conexao(self):
	self.db.close_db()


# Relacionando Tabelas 

class PessoasDb(object):

	tb_name = 'pessoas'

	def __init__(self):
		self.db = Connect('pessoas.db')
		self.tb_name

def criar_schema(self, schema_name='sql/pessoas_schema.sql'):
	print("Criando tabela %s ..." % self.tb_name)
	try:
		with open(schema_name, 'rt') as f:
			schema = f.read()
			self.db.cursor.executescript(schema)
	except sqlite3.Error:
		print("Aviso: A tabela %s já existe." % self.tb_name)
		return False

	print("Tabela %s criada com sucesso." % self.tb_name)


def inserir_de_csv(self, file_name='csv/cidades.csv'):
	try:
		
		c = csv.reader(
			open(file_name, 'rt'), delimiter=',')
		t = (c,)
		for t in c:
			self.db.cursor.execute("""
			INSERT INTO cidades (cidade, uf)
			VALUES (?,?)
			""", t)

		self.db.commit_db()
		print("Dados importados do csv com sucesso.")
	except sqlite3.IntegrityError:
		print("Aviso: A cidade deve ser única.")
		return False


def gen_cidade(self):
	''' conta quantas cidades estão cadastradas e escolhe uma delas pelo id. '''
	sql = 'SELECT COUNT(*) FROM cidades'
	q = self.db.cursor.execute(sql)
	return q.fetchone()[0]


def inserir_randomico(self, repeat=10):
	lista = []
	for _ in range(repeat):
		fname = names.get_first_name()
		lname = names.get_last_name()
		email = fname[0].lower() + '.' + lname.lower() + '@email.com'
		cidade_id = random.randint(1, self.gen_cidade())
		lista.append((fname, lname, email, cidade_id))
	try:
		self.db.cursor.executemany("""
		INSERT INTO pessoas (nome, sobrenome, email, cidade_id)
		VALUES (?,?,?,?)
		""", lista)
		self.db.commit_db()
		print("Inserindo %s registros na tabela..." % repeat)
		print("Registros criados com sucesso.")

	except sqlite3.IntegrityError:
		print("Aviso: O email deve ser único.")
		return False


def ler_todas_pessoas(self):
	sql = 'SELECT * FROM pessoas INNER JOIN cidades ON pessoas.cidade_id = cidades.id'
	r = self.db.cursor.execute(sql)
	return r.fetchall()

def imprimir_todas_pessoas(self):
	lista = self.ler_todas_pessoas()
	for c in lista:
		print(c)

def meu_select(self, sql="SELECT * FROM pessoas WHERE nome LIKE 'R%' ORDER BY nome;"):
	r = self.db.cursor.execute(sql)
	self.db.commit_db()
	print('Nomes que começam com R:')
	for c in r.fetchall():
		print(c)

def table_list(self):

	l = self.db.cursor.execute("""
	SELECT name FROM sqlite_master WHERE type='table' ORDER BY name
	""")
	print('Tabelas:')
	for tabela in l.fetchall():
		print("%s" % (tabela))

def fechar_conexao(self):
	self.db.close_db()